var satoshi = 1000000;
var root = "/";
var resource = "../";
var war_checksum;
var min = true;
var isExtension = false;
var APP_VERSION = "1.0";
var APP_NAME = "javascript_web";
var IMPORTED_APP_NAME = "external";
var IMPORTED_APP_VERSION = "0";
function stripHTML(a) {
    return $.trim($("<div>" + a.replace(/(<([^>]+)>)/ig, "") + "</div>").text())
}
$.fn.center = function () {
    scrollTo(0, 0);
    this.css("top", parseInt(Math.max(($(window).height() / 2) - (this.height() / 2), 0)) + "px");
    this.css("left", parseInt(Math.max(($(window).width() / 2) - (this.width() / 2), 0)) + "px");
    return this
};
if (!window.console) {
    var names = ["log", "debug", "info", "warn", "error", "assert", "dir", "dirxml", "group", "groupEnd", "time", "timeEnd", "count", "trace", "profile", "profileEnd"];
    window.console = {};
    for (var i = 0; i < names.length; ++i) {
        window.console[names[i]] = function () {
        }
    }
}


Date.prototype.sameDayAs = function (a) {
    return((this.getFullYear() == a.getFullYear()) && (this.getMonth() == a.getMonth()) && (this.getDate() == a.getDate()))
};
function padStr(a) {
    return(a < 10) ? "0" + a : "" + a
}
function dateToString(a) {
    if (a.sameDayAs(new Date())) {
        return TR('Today') + " " + padStr(a.getHours()) + ":" + padStr(a.getMinutes()) + ":" + padStr(a.getSeconds())
    } else {
        return padStr(a.getFullYear()) + "-" + padStr(1 + a.getMonth()) + "-" + padStr(a.getDate()) + " " + padStr(a.getHours()) + ":" + padStr(a.getMinutes()) + ":" + padStr(a.getSeconds())
    }
}
function dateToShortString(a) {
    if (a.sameDayAs(new Date())) {
        return TR('Today') + " " + padStr(a.getHours()) + ":" + padStr(a.getMinutes()) + ":" + padStr(a.getSeconds())
    } else {
        return padStr(a.getFullYear()) + "-" + padStr(1 + a.getMonth()) + "-" + padStr(a.getDate());
    }
}
function convert(a, b) {
    return(a / b).toFixed(2).toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,")
}
function sShift(a) {
    return(satoshi / a.conversion).toString().length - 1
}

function updateQueryString(b, d, a) {
    if (!a) {
        a = window.location.href
    }
    var c = new RegExp("([?|&])" + b + "=.*?(&|#|$)(.*)", "gi");
    if (c.test(a)) {
        if (typeof d !== "undefined" && d !== null) {
            return a.replace(c, "$1" + b + "=" + d + "$2$3")
        } else {
            return a.replace(c, "$1$3").replace(/(&|\?)$/, "")
        }
    } else {
        if (typeof d !== "undefined" && d !== null) {
            var f = a.indexOf("?") !== -1 ? "&" : "?", e = a.split("#");
            a = e[0] + f + b + "=" + d;
            if (e[1]) {
                a += "#" + e[1]
            }
            return a
        } else {
            return a
        }
    }
}
function loadScript(j, h, a) {
    var f = false;
    $("script").each(function () {
        var e = $(this).attr("src");
        if (e && e.replace(/^.*[\\\/]/, "").indexOf(j) == 0) {
            h();
            f = true;
            return false
        }
    });
    if (f) {
        return
    }
    console.log("Load " + j);
    var d = false;
    var c = document.createElement("script");
    c.type = "text/javascript";
    c.async = true;
    c.src = resource + j + (min ? ".min.js" : ".js") + "?" + war_checksum;
    try {
        c.addEventListener("error", function (k) {
            d = true;
            if (a) {
                a("Error Loading Script. Are You Offline?")
            }
        }, false);
        c.addEventListener("load", function (k) {
            if (!d) {
                h()
            }
        }, false)
    } catch (g) {
        setTimeout(function () {
            if (!d) {
                h()
            }
        }, 10000)
    }
    var b = document.getElementsByTagName("head")[0];
    b.appendChild(c)
}
function createImgHtml(imgB64Data, clink) {
    var html = '<a ><img';
    if (clink)
        html += ' id="' + clink;
    html += '" src="data:image/jpg;base64,' + imgB64Data + '" class="brimg"/></a>';
    return html;
}
;
function showID(id) {
    return id.substr(0, 10) + "......" + id.substr(-2);
}
;
function IsLevel2Domain(d) {
    if (!IsValidDomain)
        return false;
    return (d.substring(d.indexOf(".") + 1).indexOf(".") != -1);
}
function IsValidDomain(d) {
    if (d.indexOf("@") > -1 || d.indexOf(":") > -1 || d.indexOf(" ") > -1 || d.indexOf(".") == 0 || d.indexOf("..") > -1)
        return false;
    if (d.substring(d.length - 2) == ".f" || d.substring(d.length - 4) == ".fai")
        return true;
    return false;
}
function GetLevel1Domain(d) {
    if (!IsValidDomain(d))
        return "";
    var x = d;
    while (IsLevel2Domain(x))
        x = x.substring(x.indexOf(".") + 1);
    return x;
}

function getB64DataFromLink(clink) {
    var cj = (BrowserAPI.getContentByLink(clink));
    r = this.getFileContentFrJson(cj);
    return r;//rcreateImgHtml(r);
}
;
function parseTx(tx, IDs) {
    tx.amount = 0;
    if (!tx.blockheight)
        tx.confirmations = 0;
    if (tx.iscoinbase) {
        tx.category = "minted";
        for (var j in tx.vout)
            tx.amount += Number(tx.vout[j].value);
        tx.address = tx.vout[0].scriptPubKey.addresses[0];
    } else {
        var fromLocal = false;
        var fromForeign = false;
        var toForeign = false;
        var fromLocalAddress;
        var fromForeignAddress;
        var toForeignAddress;
        var toLocalAddress;
        for (var j in tx.vin) {
            var inid = tx.vin[j].scriptPubKey.addresses[0];
            var isOwnID = false;
            for (var k in IDs)
                if (IDs[k] == inid)
                    isOwnID = true;
            if (isOwnID) {
                fromLocal = true;
                tx.amount -= Number(tx.vin[j].value);
                fromLocalAddress = inid;
            } else {
                fromForeign = true;
                fromForeignAddress = inid;
            }
        }
        for (var j in tx.vout) {

            var outid = "Publish Content";
            if (tx.vout[j].scriptPubKey.addresses)
                outid = tx.vout[j].scriptPubKey.addresses[0];
            var isOwnID = false;
            for (var k in IDs)
                if (IDs[k] == outid)
                    isOwnID = true;
            if (isOwnID) {
                tx.amount += Number(tx.vout[j].value);
                toLocalAddress = outid;
            } else {
                toForeign = true;
                toForeignAddress = outid;
            }
        }
        if (fromLocal && fromForeign) {
            if (tx.amount > 0) {
                tx.category = "receive";
                tx.address = fromForeignAddress;
            }
            else {
                tx.category = "receive";
                tx.address = toLocalAddress;
            }
        } else if (fromForeign) {
            tx.category = "receive";
            tx.address = toLocalAddress;
        } else if (toForeign) {
            tx.category = "send";
            tx.address = toLocalAddress;
        } else {
            tx.category = "toSelf";
            tx.address = toLocalAddress;
        }
    }
    tx.amount = tx.amount.toFixed(6);
    return tx;
}
function getStrLinkType(str)
{
    if (CLink.setString(str).isValid())
        return "link_blockchain";
    if (IsValidDomain(str))
        return "domain";
    var b32d = BrowserAPI.b32CheckDecode(str);
    if (b32d && !b32d.error)
        return "id";
    return "other";
}